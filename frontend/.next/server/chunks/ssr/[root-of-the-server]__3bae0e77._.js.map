{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/nagalingamseenivasan/Documents/GitHub/quiz-generator/frontend/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\n\n/**\n * Type Definitions\n */\n\n/** Represents a single quiz question with multiple choice options */\ntype Question = {\n  /** The question text */\n  question: string;\n  /** Array of 4 multiple choice options */\n  options: string[];\n  /** Index (0-3) of the correct answer in the options array */\n  correctOptionIndex: number;\n  /** Optional explanation of why the answer is correct */\n  explanation?: string;\n};\n\n/** Represents a completed quiz result */\ntype QuizResult = {\n  /** The topic/subject of the quiz */\n  topic: string;\n  /** Number of correct answers */\n  score: number;\n  /** Total number of questions in the quiz */\n  totalQuestions: number;\n  /** ISO timestamp when the quiz was completed */\n  timestamp: string;\n};\n\n/** Maps question indices to selected option indices */\ntype UserAnswers = {\n  [questionIndex: number]: number;\n};\n\n/**\n * Main Quiz Application Component\n * \n * Provides a complete quiz experience including:\n * - Topic input and quiz generation\n * - Interactive question answering\n * - Results display with explanations\n * - Quiz history tracking\n * \n * @returns {JSX.Element} The main quiz application interface\n */\nexport default function Home() {\n  // === State Management ===\n  // The topic for the quiz entered by the user.\n  const [topic, setTopic] = useState('');\n  // The array of quiz questions received from the backend.\n  const [quiz, setQuiz] = useState<Question[] | null>(null);\n  // An object to store the user's selected answers.\n  const [userAnswers, setUserAnswers] = useState<UserAnswers>({});\n  // The user's final score.\n  const [score, setScore] = useState<number | null>(null);\n  // A boolean to indicate if the initial quiz is being generated.\n  const [loading, setLoading] = useState(false);\n  // A boolean to indicate if more questions are being loaded.\n  const [loadingMore, setLoadingMore] = useState(false);\n  // A string to store any error messages.\n  const [error, setError] = useState<string | null>(null);\n  // A boolean to indicate if the quiz has been submitted and the results are being shown.\n  const [quizFinished, setQuizFinished] = useState(false);\n  // Array to store quiz results history\n  const [quizResults, setQuizResults] = useState<QuizResult[]>([]);\n  // Boolean to show/hide results history\n  const [showResults, setShowResults] = useState(false);\n\n  /**\n   * Generates a new quiz for the specified topic\n   * \n   * Validates input, calls the backend API, and handles both success and error cases.\n   * Falls back to mock data if the API fails.\n   * \n   * @async\n   * @function handleGenerateQuiz\n   * @returns {Promise<void>}\n   */\n  const handleGenerateQuiz = async () => {\n    // Basic validation to ensure a topic is entered.\n    if (!topic.trim()) {\n      setError('Please enter a topic.');\n      return;\n    }\n    // Set loading state and reset previous quiz data.\n    setLoading(true);\n    setError(null);\n    setQuiz(null);\n    setQuizFinished(false);\n    setUserAnswers({});\n    setScore(null);\n\n    try {\n      // Fetch the quiz from the backend API.\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'}/api/quiz`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ topic }),\n      });\n\n      // Handle non-successful HTTP responses.\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate quiz');\n      }\n\n      const data: Question[] = await response.json();\n      // Validate the data received from the backend.\n      if (!Array.isArray(data) || data.length === 0) {\n        throw new Error(\"The AI returned invalid quiz data. Please try again.\");\n      }\n      setQuiz(data);\n    } catch (err: any) {\n      setError(err.message || 'An unknown error occurred.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Loads additional questions for the current topic\n   * \n   * Fetches 5 more questions from the backend API and appends them to the existing quiz.\n   * Maintains the same topic and handles errors gracefully.\n   * \n   * @async\n   * @function handleLoadMore\n   * @returns {Promise<void>}\n   */\n  const handleLoadMore = async () => {\n    setLoadingMore(true);\n    setError(null);\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'}/api/quiz`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ topic }), // Use the same topic\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate more questions');\n      }\n\n      const newQuestions: Question[] = await response.json();\n      if (!Array.isArray(newQuestions) || newQuestions.length === 0) {\n        throw new Error(\"The AI returned invalid quiz data. Please try again.\");\n      }\n      // Append new questions to the existing quiz array.\n      setQuiz(prevQuiz => prevQuiz ? [...prevQuiz, ...newQuestions] : newQuestions);\n    } catch (err: any) {\n      setError(err.message || 'An unknown error occurred while loading more questions.');\n    } finally {\n      setLoadingMore(false);\n    }\n  };\n\n  /**\n   * Records the user's answer selection for a question\n   * \n   * Updates the userAnswers state with the selected option for the given question.\n   * Allows users to change their answers before submitting.\n   * \n   * @function handleAnswerSelect\n   * @param {number} questionIndex - Zero-based index of the question (0-4)\n   * @param {number} optionIndex - Zero-based index of the selected option (0-3)\n   * @returns {void}\n   */\n  const handleAnswerSelect = (questionIndex: number, optionIndex: number) => {\n    setUserAnswers({\n      ...userAnswers,\n      [questionIndex]: optionIndex,\n    });\n  };\n\n  /**\n   * Calculates the user's score and transitions the UI to the results view.\n   */\n  /**\n   * Calculates the final score and saves the quiz result\n   * \n   * Compares user answers with correct answers, calculates the score,\n   * transitions to results view, and saves the result to the backend.\n   * \n   * @async\n   * @function handleSubmitQuiz\n   * @returns {Promise<void>}\n   */\n  const handleSubmitQuiz = async () => {\n    if (!quiz) return;\n    \n    let correctAnswers = 0;\n    // Calculate score by comparing user answers with correct answers\n    quiz.forEach((question, index) => {\n      if (userAnswers[index] === question.correctOptionIndex) {\n        correctAnswers++;\n      }\n    });\n    \n    setScore(correctAnswers);\n    setQuizFinished(true);\n    \n    // Persist quiz result to backend\n    try {\n      await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'}/api/results`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          topic, \n          score: correctAnswers, \n          totalQuestions: quiz.length \n        })\n      });\n    } catch (error) {\n      console.error('Failed to save quiz result:', error);\n    }\n  };\n\n  /**\n   * Resets the entire application state to allow the user to start a new quiz.\n   */\n  /**\n   * Loads and displays the quiz results history\n   * \n   * Fetches the user's quiz history from the backend and displays it in a modal.\n   * Shows the last 10 quiz attempts with scores and dates.\n   * \n   * @async\n   * @function loadQuizResults\n   * @returns {Promise<void>}\n   */\n  const loadQuizResults = async () => {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'}/api/results`);\n      if (response.ok) {\n        const data = await response.json();\n        setQuizResults(data.results || data); // Handle both paginated and simple responses\n        setShowResults(true);\n      }\n    } catch (error) {\n      console.error('Failed to load quiz results:', error);\n    }\n  };\n\n  /**\n   * Resets the application to its initial state\n   * \n   * Clears all quiz data, user answers, and UI state to allow starting a new quiz.\n   * Returns the user to the topic input screen.\n   * \n   * @function handleRestart\n   * @returns {void}\n   */\n  const handleRestart = () => {\n    setTopic('');\n    setQuiz(null);\n    setUserAnswers({});\n    setScore(null);\n    setError(null);\n    setQuizFinished(false);\n    setShowResults(false);\n  };\n\n  // === JSX Rendering ===\n  return (\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col items-center justify-center p-4\">\n      <main className=\"w-full max-w-2xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n        <h1 className=\"text-3xl font-bold text-center mb-6 text-blue-600 dark:text-blue-400\">AI Quiz Generator</h1>\n\n        {/* View 1: Topic Input Form (Initial State) */}\n        {!quiz && !quizFinished && (\n          <div className=\"flex flex-col items-center\">\n            <input\n              type=\"text\"\n              value={topic}\n              onChange={(e) => setTopic(e.target.value)}\n              placeholder=\"Enter a topic (e.g., Photosynthesis)\"\n              className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700\"\n              disabled={loading}\n            />\n            <button\n              onClick={handleGenerateQuiz}\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-blue-400 dark:disabled:bg-blue-800 transition-colors\"\n            >\n              {loading ? 'Generating...' : 'Generate Quiz'}\n            </button>\n            {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n          </div>\n        )}\n\n        {/* Loading indicator for initial quiz generation */}\n        {loading && (\n            <div className=\"text-center\">\n                <p>Generating your quiz, please wait...</p>\n            </div>\n        )}\n\n        {/* View 2: Active Quiz */}\n        {quiz && !quizFinished && (\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-4 text-center\">Quiz on: {topic}</h2>\n            {quiz.map((q, qIndex) => (\n              <div key={qIndex} className=\"mb-6\">\n                <p className=\"font-semibold mb-2\">{qIndex + 1}. {q.question}</p>\n                <div className=\"space-y-2\">\n                  {q.options.map((option, oIndex) => (\n                    <label key={oIndex} className=\"flex items-center p-2 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700\">\n                      <input\n                        type=\"radio\"\n                        name={`question-${qIndex}`}\n                        checked={userAnswers[qIndex] === oIndex}\n                        onChange={() => handleAnswerSelect(qIndex, oIndex)}\n                        className=\"mr-3\"\n                      />\n                      {option}\n                    </label>\n                  ))}\n                </div>\n              </div>\n            ))}\n            <div className=\"flex flex-col sm:flex-row gap-4 mt-6\">\n              <button\n                onClick={handleSubmitQuiz}\n                className=\"w-full sm:w-1/2 bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                Submit Quiz\n              </button>\n              <button\n                onClick={handleLoadMore}\n                disabled={loadingMore}\n                className=\"w-full sm:w-1/2 bg-gray-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-600 disabled:bg-gray-400 dark:disabled:bg-gray-700 transition-colors\"\n              >\n                {loadingMore ? 'Loading...' : 'Load More Questions'}\n              </button>\n            </div>\n            {/* Show error messages related to loading more questions */}\n            {error && <p className=\"text-red-500 mt-4 text-center\">{error}</p>}\n          </div>\n        )}\n\n        {/* View 3: Quiz Results */}\n        {quizFinished && quiz && (\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-4 text-center\">Quiz Results</h2>\n            <p className=\"text-xl text-center mb-6\">You scored <span className=\"font-bold\">{score}</span> out of <span className=\"font-bold\">{quiz.length}</span></p>\n\n            {quiz.map((q, qIndex) => {\n              const userAnswer = userAnswers[qIndex];\n              const isCorrect = userAnswer === q.correctOptionIndex;\n              return (\n                <div key={qIndex} className=\"mb-4 p-3 rounded-lg\" style={{ border: `2px solid ${isCorrect ? 'green' : 'red'}` }}>\n                  <p className=\"font-semibold\">{qIndex + 1}. {q.question}</p>\n                  <div className=\"mt-2\">\n                    {q.options.map((option, oIndex) => {\n                      let style = {};\n                      if (oIndex === q.correctOptionIndex) {\n                        // Style for the correct answer\n                        style = { color: 'green', fontWeight: 'bold' };\n                      } else if (oIndex === userAnswer) {\n                        // Style for the user's incorrect answer\n                        style = { color: 'red', fontWeight: 'bold' };\n                      }\n                      return <p key={oIndex} style={style}>{option}</p>;\n                    })}\n                  </div>\n                  {/* Show the user's incorrect answer explicitly if they got it wrong */}\n                  {!isCorrect && userAnswer !== undefined && <p className=\"text-sm mt-1\">Your answer: <span style={{color: 'red'}}>{q.options[userAnswer]}</span></p>}\n                  <p className=\"text-sm mt-1\">Correct answer: <span style={{color: 'green'}}>{q.options[q.correctOptionIndex]}</span></p>\n                  {q.explanation && <p className=\"text-sm mt-2 p-2 bg-blue-50 dark:bg-blue-900 rounded\"><strong>Explanation:</strong> {q.explanation}</p>}\n                </div>\n              );\n            })}\n\n            <div className=\"flex flex-col sm:flex-row gap-4 mt-6\">\n              <button\n                onClick={handleRestart}\n                className=\"w-full sm:w-1/2 bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                Take Another Quiz\n              </button>\n              <button\n                onClick={loadQuizResults}\n                className=\"w-full sm:w-1/2 bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                View Results History\n              </button>\n            </div>\n          </div>\n        )}\n\n        {showResults && (\n          <div className=\"mt-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-center\">Quiz Results History</h2>\n            {quizResults.length === 0 ? (\n              <p className=\"text-center\">No quiz results yet.</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {quizResults.slice(-10).reverse().map((result, index) => (\n                  <div key={index} className=\"p-3 border rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-semibold\">{result.topic}</span>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {new Date(result.timestamp).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"text-sm\">\n                      Score: {result.score}/{result.totalQuestions} ({Math.round((result.score/result.totalQuestions)*100)}%)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n            <button\n              onClick={() => setShowResults(false)}\n              className=\"w-full mt-4 bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors\"\n            >\n              Close History\n            </button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":["file:///Users/nagalingamseenivasan/Documents/GitHub/quiz-generator/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,QAAQ;;KAElC;IACL,IAAIF,QAAQC,GAAG,CAACK,yBAAyB,EAAE;;SAcpC;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;QAGT,OAAO;;IAOT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["file:///Users/nagalingamseenivasan/Documents/GitHub/quiz-generator/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,qKACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///Users/nagalingamseenivasan/Documents/GitHub/quiz-generator/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n"],"names":["module","exports","require","vendored","React"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,qKACRC,QAAQ,CAAC,YAAY,CAAEC,KAAK","ignoreList":[0],"debugId":null}}]
}